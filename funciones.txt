Option Explicit

' =====================================================================
' CONSTANTES GLOBALES - Performance & Configuration
' =====================================================================
Private Const LOADFACTOR_FILENAME As String = "ENSAMBLE_LOADFACTOR.TXT"
Private Const DEFAULT_UNC As String = "\\Yazaki.local\na\elcom\chihuahua\Area_General\Materiales\Archivos Macro PCD\EP1\Extractor\"
Private Const DEFAULT_FILENAME As String = "ENSAMBLE_ORDER_STAT_Query.TXT"
Private Const EXCLUIR_TROQUEL As Boolean = False

' Constantes para índices de columnas
Private Const COL_MATERIAL As Long = 1
Private Const COL_SHORTTXT As Long = 5
Private Const COL_WORKCTR As Long = 6
Private Const COL_AS As Long = 45

' =====================================================================
' CLASE DE OPTIMIZACIÓN - Manejo de configuración de Excel
' =====================================================================
Private Type ExcelState
    Calculation As XlCalculation
    ScreenUpdating As Boolean
    EnableEvents As Boolean
    DisplayAlerts As Boolean
End Type

Private Function SaveExcelState() As ExcelState
    With SaveExcelState
        .Calculation = Application.Calculation
        .ScreenUpdating = Application.ScreenUpdating
        .EnableEvents = Application.EnableEvents
        .DisplayAlerts = Application.DisplayAlerts
    End With
End Function

Private Sub OptimizeExcelPerformance()
    With Application
        .Calculation = xlCalculationManual
        .ScreenUpdating = False
        .EnableEvents = False
        .DisplayAlerts = False
    End With
End Sub

Private Sub RestoreExcelState(state As ExcelState)
    With Application
        .Calculation = state.Calculation
        .ScreenUpdating = state.ScreenUpdating
        .EnableEvents = state.EnableEvents
        .DisplayAlerts = state.DisplayAlerts
    End With
End Sub

' =====================================================================
' FUNCIONES HELPER MEJORADAS
' =====================================================================
Private Function TieneTroquel(ByVal s As String) As Boolean
    TieneTroquel = (InStr(1, s, "Troquel", vbTextCompare) > 0)
End Function

Private Function Num(ByVal s As String) As Double
    On Error Resume Next
    Num = Val(Replace$(Trim$(s), ",", "."))
    On Error GoTo 0
End Function

Private Function EficienciaDeTexto(ByVal s As String) As Double
    Dim i As Long, c As String, buf As String, n As Double
    For i = 1 To Len(s)
        c = Mid$(s, i, 1)
        If (c >= "0" And c <= "9") Or c = "." Or c = "," Then buf = buf & c
    Next i

    If buf <> "" Then n = Num(buf)
    If n = 0 Then
        EficienciaDeTexto = 1#
    ElseIf n > 1.001 Then
        EficienciaDeTexto = n / 100#
    Else
        EficienciaDeTexto = n
    End If
End Function

Function QuitarCerosIzquierda(txt As String) As String
    If Len(txt) = 0 Then
        QuitarCerosIzquierda = ""
        Exit Function
    End If
    Do While Left$(txt, 1) = "0" And Len(txt) > 1
        txt = Mid$(txt, 2)
    Loop
    QuitarCerosIzquierda = txt
End Function

Function buscaArchivo(pNombre As String) As String
    Dim vLstRen As Long
    Dim h As Integer

    With ThisWorkbook.Sheets("Macro")
        vLstRen = .Cells(.Rows.Count, "A").End(xlUp).Row
        For h = 1 To vLstRen
            If .Cells(h, "A").Value = pNombre Then
                buscaArchivo = .Cells(h, "B").Value
                Exit Function
            End If
        Next h
    End With
End Function

Private Function CleanNumber(ByVal s As String) As Double
    s = Replace$(Replace$(Trim$(s), ",", ""), " ", "")
    If Len(s) = 0 Or s = "-" Then
        CleanNumber = 0
    Else
        On Error Resume Next
        CleanNumber = CDbl(s)
        On Error GoTo 0
    End If
End Function

Private Function ParseYYYYMMDD(ByVal s As String) As Date
    Dim y As Integer, m As Integer, d As Integer
    s = Trim$(s)
    If Len(s) <> 8 Or Not IsNumeric(s) Then
        Err.Raise 5, "ParseYYYYMMDD", "Fecha inválida (yyyymmdd): " & s
    End If
    y = CInt(Left$(s, 4))
    m = CInt(Mid$(s, 5, 2))
    d = CInt(Right$(s, 2))
    ParseYYYYMMDD = DateSerial(y, m, d)
End Function

Private Function EsVacioRobusto(ByVal v As Variant) As Boolean
    If IsError(v) Or IsEmpty(v) Then
        EsVacioRobusto = True
        Exit Function
    End If

    Dim s As String
    s = CStr(v)
    s = Replace$(Replace$(Replace$(Replace$(s, vbCr, ""), vbLf, ""), vbTab, ""), Chr$(160), "")
    s = Trim$(s)
    EsVacioRobusto = (LenB(s) = 0)
End Function

Private Function UltimaFila(ws As Worksheet) As Long
    Dim c As Range
    On Error Resume Next
    Set c = ws.Cells.Find(What:="*", After:=ws.Cells(1, 1), _
                          LookIn:=xlFormulas, LookAt:=xlPart, _
                          SearchOrder:=xlByRows, SearchDirection:=xlPrevious, _
                          MatchCase:=False)
    On Error GoTo 0
    UltimaFila = IIf(c Is Nothing, 1, c.Row)
End Function

Private Function EnsureSheet(wb As Workbook, nombre As String) As Worksheet
    Dim ws As Worksheet
    For Each ws In wb.Worksheets
        If StrComp(ws.Name, nombre, vbTextCompare) = 0 Then
            Set EnsureSheet = ws
            Exit Function
        End If
    Next ws
    Set EnsureSheet = wb.Sheets.Add(After:=wb.Sheets(wb.Sheets.Count))
    EnsureSheet.Name = nombre
End Function

Public Function WorksheetExists(sheetName As String, Optional wb As Workbook) As Boolean
    Dim sht As Worksheet
    On Error Resume Next
    If wb Is Nothing Then Set wb = ThisWorkbook
    Set sht = wb.Sheets(sheetName)
    WorksheetExists = Not sht Is Nothing
    On Error GoTo 0
End Function

' =====================================================================
' LECTURA DE ARCHIVOS OPTIMIZADA
' =====================================================================
Private Function LeerArchivoCompleto(fullPath As String) As String()
    Dim binData As String, fnum As Integer

    If Dir(fullPath) = "" Then
        Err.Raise vbObjectError + 1, "LeerArchivoCompleto", "Archivo no encontrado: " & fullPath
    End If

    fnum = FreeFile
    Open fullPath For Binary As #fnum
        binData = Space$(LOF(fnum))
        Get #fnum, , binData
    Close #fnum

    ' Normalizar saltos de línea
    binData = Replace$(Replace$(binData, vbCrLf, vbLf), vbCr, vbLf)

    ' Quitar BOM UTF-8 si existe
    If Len(binData) >= 3 Then
        If Left$(binData, 3) = Chr$(239) & Chr$(187) & Chr$(191) Then
            binData = Mid$(binData, 4)
        End If
    End If

    LeerArchivoCompleto = Split(binData, vbLf)
End Function

' =====================================================================
' ORDENES - OPTIMIZADO
' =====================================================================
Sub traeInformacionOrdenes(pPlan As String, txtFechaFin As String)
    Dim state As ExcelState
    state = SaveExcelState()
    OptimizeExcelPerformance

    On Error GoTo ErrorHandler

    Dim rutaArchivos As String, vArchivo As String, fullPath As String
    Dim lineas() As String, campos() As String
    Dim fechaFin As Long, fechaETD As Long
    Dim wsDestino As Worksheet
    Dim dataArray() As Variant
    Dim fila As Long, i As Long

    ' Validar fecha
    If Not ValidarFechaYYYYMMDD(txtFechaFin, fechaFin) Then
        Err.Raise vbObjectError + 2, , "Fecha inválida: " & txtFechaFin
    End If

    ' Obtener archivo
    rutaArchivos = ThisWorkbook.Sheets("Macro").Range("B1").Value
    vArchivo = buscaArchivo("Ordenes")
    fullPath = rutaArchivos & vArchivo

    ' Leer archivo
    lineas = LeerArchivoCompleto(fullPath)

    ' Preparar hoja destino
    Set wsDestino = Workbooks(pPlan).Sheets("Orderstats")
    wsDestino.Cells.ClearContents
    wsDestino.Range("A1:J1").Value = Array("PartNo", "Control", "Item", "ETD", "Qty", "St", "PO", "Fecha PO", "Linea", "Planta")

    ' Pre-dimensionar array (estimado)
    ReDim dataArray(1 To UBound(lineas), 1 To 10)
    fila = 1

    ' Procesar líneas
    For i = 1 To UBound(lineas)
        If Trim$(lineas(i)) <> "" Then
            campos = Split(lineas(i), "|")
            If UBound(campos) >= 9 Then
                If IsNumeric(campos(3)) And Len(Trim$(campos(3))) = 8 Then
                    fechaETD = CLng(campos(3))
                    If fechaETD <= fechaFin Then
                        fila = fila + 1
                        dataArray(fila, 1) = campos(0)
                        dataArray(fila, 2) = campos(1)
                        dataArray(fila, 3) = QuitarCerosIzquierda(campos(2))
                        dataArray(fila, 4) = DateSerial(Left$(campos(3), 4), Mid$(campos(3), 5, 2), Right$(campos(3), 2))
                        dataArray(fila, 5) = campos(4)
                        dataArray(fila, 6) = campos(5)
                        dataArray(fila, 7) = campos(6)
                        dataArray(fila, 8) = campos(7)
                        dataArray(fila, 9) = campos(8)
                        dataArray(fila, 10) = campos(9)
                    End If
                End If
            End If
        End If
    Next i

    ' Escribir datos en una sola operación
    If fila > 1 Then
        wsDestino.Range("A2").Resize(fila - 1, 10).Value = dataArray

        ' Ordenar
        With wsDestino.Sort
            .SortFields.Clear
            .SortFields.Add Key:=wsDestino.Range("D2:D" & fila), _
                SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
            .SetRange wsDestino.Range("A1:J" & fila)
            .Header = xlYes
            .Apply
        End With
    Else
        MsgBox "No se encontraron registros válidos", vbExclamation
    End If

    RestoreExcelState state
    Exit Sub

ErrorHandler:
    RestoreExcelState state
    MsgBox "Error en traeInformacionOrdenes: " & Err.Description, vbCritical
End Sub

Private Function ValidarFechaYYYYMMDD(txtFecha As String, ByRef fechaLong As Long) As Boolean
    Dim anio As Integer, mes As Integer, dia As Integer
    Dim fechaConvertida As Date

    On Error GoTo ErrorFecha

    If Len(txtFecha) <> 8 Or Not IsNumeric(txtFecha) Then GoTo ErrorFecha

    anio = CInt(Left$(txtFecha, 4))
    mes = CInt(Mid$(txtFecha, 5, 2))
    dia = CInt(Right$(txtFecha, 2))

    If mes < 1 Or mes > 12 Or dia < 1 Or dia > 31 Then GoTo ErrorFecha

    fechaConvertida = DateSerial(anio, mes, dia)
    fechaLong = CLng(Format$(fechaConvertida, "yyyymmdd"))
    ValidarFechaYYYYMMDD = True
    Exit Function

ErrorFecha:
    ValidarFechaYYYYMMDD = False
End Function

' =====================================================================
' ORDER STAT - VERSIÓN OPTIMIZADA CON FILTROS DE FECHA
' =====================================================================
Public Sub CargarOrderStat_DesdeUNC_Hasta(pPlan As String, endYYYYMMDD As String, _
                                          Optional carpeta As String = vbNullString, _
                                          Optional archivo As String = vbNullString)
    If Len(carpeta) = 0 Then carpeta = DEFAULT_UNC
    If Len(archivo) = 0 Then archivo = DEFAULT_FILENAME

    Dim fullPath As String
    If Right$(carpeta, 1) <> "\" And Right$(carpeta, 1) <> "/" Then carpeta = carpeta & "\"
    fullPath = carpeta & archivo

    CargarOrderStatDesdeArchivo pPlan, fullPath, vbNullString, endYYYYMMDD
End Sub

Public Sub CargarOrderStat_DesdeUNC_Rango(pPlan As String, startYYYYMMDD As String, _
                                          endYYYYMMDD As String, _
                                          Optional carpeta As String = vbNullString, _
                                          Optional archivo As String = vbNullString)
    If Len(carpeta) = 0 Then carpeta = DEFAULT_UNC
    If Len(archivo) = 0 Then archivo = DEFAULT_FILENAME

    Dim fullPath As String
    If Right$(carpeta, 1) <> "\" And Right$(carpeta, 1) <> "/" Then carpeta = carpeta & "\"
    fullPath = carpeta & archivo

    CargarOrderStatDesdeArchivo pPlan, fullPath, startYYYYMMDD, endYYYYMMDD
End Sub

Public Sub CargarOrderStatDesdeArchivo(pPlan As String, fullPath As String, _
                                       Optional startYYYYMMDD As String = "", _
                                       Optional endYYYYMMDD As String = "")
    Dim state As ExcelState
    state = SaveExcelState()
    OptimizeExcelPerformance

    On Error GoTo ErrorHandler

    Dim lineas() As String, campos() As String, dataArray() As Variant
    Dim wb As Workbook, ws As Worksheet
    Dim i As Long, fila As Long
    Dim hasStart As Boolean, hasEnd As Boolean
    Dim dStart As Date, dEnd As Date, vFecha As Date
    Dim hoy As Date, limite As Date

    ' Parseo de fechas
    If Len(startYYYYMMDD) > 0 Then
        dStart = ParseYYYYMMDD(startYYYYMMDD)
        hasStart = True
    End If
    If Len(endYYYYMMDD) > 0 Then
        dEnd = ParseYYYYMMDD(endYYYYMMDD)
        hasEnd = True
    End If

    ' Leer archivo
    lineas = LeerArchivoCompleto(fullPath)

    ' Preparar hoja
    Set wb = Workbooks(pPlan)
    Set ws = EnsureSheet(wb, "OrderStats")
    ws.Cells.ClearContents
    ws.Range("A1:K1").Value = Array("CUST. CD.", "S/T", "PARTNO", "ETD", "ETA", _
                                    "QUANTITY", "SHIPPING QTY", "Remain", "CUST. PO", "ORDER FLG", "Date")

    ' Pre-dimensionar array
    ReDim dataArray(1 To UBound(lineas), 1 To 11)
    fila = 0
    hoy = Date
    limite = hoy + 7

    ' Procesar primer archivo
    For i = LBound(lineas) To UBound(lineas)
        If ProcesarLineaOrderStat(lineas(i), campos, vFecha, hasStart, hasEnd, dStart, dEnd) Then
            fila = fila + 1
            LlenarArrayOrderStat dataArray, fila, campos, vFecha, hoy, limite
        End If
    Next i

    ' Procesar segundo archivo si existe
    ProcesarSegundoArchivoOrderStat fullPath, lineas, dataArray, fila, hasStart, hasEnd, dStart, dEnd, hoy, limite

    ' Escribir datos
    If fila > 0 Then
        ws.Range("A2").Resize(fila, 11).Value = dataArray
        ws.Columns("A:K").AutoFit
        If ws.AutoFilterMode Then ws.AutoFilterMode = False
        ws.Range("A1:K" & fila + 1).AutoFilter
        MsgBox "Cargado Order Stat: " & fila & " filas", vbInformation
    Else
        MsgBox "No se encontraron datos en el rango especificado", vbExclamation
    End If

    RestoreExcelState state
    Exit Sub

ErrorHandler:
    RestoreExcelState state
    MsgBox "Error en CargarOrderStatDesdeArchivo: " & Err.Description, vbCritical
End Sub

Private Function ProcesarLineaOrderStat(ln As String, ByRef campos() As String, _
                                        ByRef vFecha As Date, _
                                        hasStart As Boolean, hasEnd As Boolean, _
                                        dStart As Date, dEnd As Date) As Boolean
    On Error GoTo Saltar

    ln = Trim$(ln)
    If ln = "" Then GoTo Saltar
    If Left$(ln, 1) <> "|" Then GoTo Saltar
    If InStr(1, ln, "|Plnt|", vbTextCompare) > 0 Then GoTo Saltar
    If InStr(1, ln, "---", vbTextCompare) > 0 Then GoTo Saltar
    If InStr(1, ln, "Demanda de cliente", vbTextCompare) > 0 Then GoTo Saltar

    campos = Split(ln, "|")
    If UBound(campos) < 7 Then GoTo Saltar

    vFecha = CDate(Trim$(campos(4)))

    ' Filtro de fechas
    If hasStart And vFecha < dStart Then GoTo Saltar
    If hasEnd And vFecha > dEnd Then GoTo Saltar

    ProcesarLineaOrderStat = True
    Exit Function

Saltar:
    ProcesarLineaOrderStat = False
End Function

Private Sub LlenarArrayOrderStat(ByRef arr() As Variant, fila As Long, campos() As String, _
                                 vFecha As Date, hoy As Date, limite As Date)
    Dim vFecha2 As Date
    vFecha2 = DateAdd("d", -Val(campos(8)), vFecha)

    arr(fila, 1) = "YZP" & Trim$(campos(1))
    arr(fila, 2) = "YZP" & Trim$(campos(1))
    arr(fila, 3) = "'" & Trim$(campos(3))
    arr(fila, 4) = vFecha2
    arr(fila, 5) = vFecha
    arr(fila, 6) = CleanNumber(campos(5))
    arr(fila, 7) = CleanNumber(campos(6))
    arr(fila, 8) = arr(fila, 6) - arr(fila, 7)
    arr(fila, 9) = Trim$(campos(7))
    arr(fila, 11) = vFecha2

    ' Determinar flag
    If vFecha >= hoy And vFecha <= limite Then
        arr(fila, 10) = "O"
    ElseIf vFecha > limite Then
        arr(fila, 10) = "F"
    Else
        arr(fila, 10) = "P"
    End If
End Sub

Private Sub ProcesarSegundoArchivoOrderStat(fullPath As String, ByRef lineas() As String, _
                                            ByRef dataArray() As Variant, ByRef fila As Long, _
                                            hasStart As Boolean, hasEnd As Boolean, _
                                            dStart As Date, dEnd As Date, hoy As Date, limite As Date)
    Dim fullPath2 As String, p As Long, carpeta2 As String
    Dim campos() As String, vFecha As Date
    Dim i As Long

    p = InStrRev(fullPath, "\")
    If p = 0 Then p = InStrRev(fullPath, "/")
    If p > 0 Then carpeta2 = Left$(fullPath, p) Else Exit Sub

    fullPath2 = carpeta2 & "ENSAMBLE_ORDER_STAT_Query2.TXT"
    If Dir(fullPath2) = "" Then Exit Sub

    On Error Resume Next
    lineas = LeerArchivoCompleto(fullPath2)
    If Err.Number <> 0 Then Exit Sub
    On Error GoTo 0

    For i = LBound(lineas) To UBound(lineas)
        If ProcesarLineaOrderStat2(lineas(i), campos, vFecha, hasStart, hasEnd, dStart, dEnd) Then
            fila = fila + 1
            If fila > UBound(dataArray, 1) Then
                ReDim Preserve dataArray(1 To fila + 1000, 1 To 11)
            End If
            LlenarArrayOrderStat2 dataArray, fila, campos, vFecha, hoy, limite
        End If
    Next i
End Sub

Private Function ProcesarLineaOrderStat2(ln As String, ByRef campos() As String, _
                                         ByRef vFecha As Date, _
                                         hasStart As Boolean, hasEnd As Boolean, _
                                         dStart As Date, dEnd As Date) As Boolean
    On Error GoTo Saltar

    ln = Trim$(ln)
    If ln = "" Then GoTo Saltar
    If Left$(ln, 1) <> "|" Then GoTo Saltar
    If InStr(1, ln, "|Plnt|", vbTextCompare) > 0 Then GoTo Saltar
    If InStr(1, ln, "---", vbTextCompare) > 0 Then GoTo Saltar

    campos = Split(ln, "|")
    If UBound(campos) < 9 Then GoTo Saltar

    ' Excluir materiales que inician con "M"
    If UCase$(Left$(Trim$(campos(3)), 1)) = "M" Then GoTo Saltar

    vFecha = ParseDateFromField(campos(5))

    ' Filtro de fechas
    If hasStart And vFecha < dStart Then GoTo Saltar
    If hasEnd And vFecha > dEnd Then GoTo Saltar

    ProcesarLineaOrderStat2 = True
    Exit Function

Saltar:
    ProcesarLineaOrderStat2 = False
End Function

Private Sub LlenarArrayOrderStat2(ByRef arr() As Variant, fila As Long, campos() As String, _
                                  vDeliv2 As Date, hoy As Date, limite As Date)
    Dim vGI As Date
    vGI = ParseDateFromField(campos(4))

    arr(fila, 1) = Trim$(campos(1))
    arr(fila, 2) = Trim$(campos(2))
    arr(fila, 3) = "'" & Trim$(campos(3))
    arr(fila, 4) = vGI
    arr(fila, 5) = vDeliv2
    arr(fila, 6) = CleanNumber(campos(6))
    arr(fila, 7) = IIf(Trim$(campos(7)) = "", 0, CleanNumber(campos(7)))
    arr(fila, 8) = arr(fila, 6) - arr(fila, 7)
    arr(fila, 9) = Trim$(campos(8))
    arr(fila, 11) = vGI

    If vDeliv2 >= hoy And vDeliv2 <= hoy + 7 Then
        arr(fila, 10) = "O"
    ElseIf vDeliv2 > hoy + 7 Then
        arr(fila, 10) = "F"
    Else
        arr(fila, 10) = "P"
    End If
End Sub

Private Function ParseDateFromField(ByVal s As String) As Date
    s = Trim$(s)
    If Len(s) = 10 And Mid$(s, 3, 1) = "/" And Mid$(s, 6, 1) = "/" Then
        ParseDateFromField = DateSerial(CInt(Right$(s, 4)), CInt(Left$(s, 2)), CInt(Mid$(s, 4, 2)))
    ElseIf Len(s) = 8 And IsNumeric(s) Then
        ParseDateFromField = DateSerial(CInt(Left$(s, 4)), CInt(Mid$(s, 5, 2)), CInt(Right$(s, 2)))
    Else
        ParseDateFromField = CDate(s)
    End If
End Function

' =====================================================================
' LOAD FACTOR - OPTIMIZADO
' =====================================================================
Sub TraeInformacionLoadFactor(pPlan As String)
    Dim state As ExcelState
    state = SaveExcelState()
    OptimizeExcelPerformance

    On Error GoTo ErrorHandler

    Dim rutaArchivos As String, fullPath As String
    Dim wsDestino As Worksheet
    Dim dictUnicos As Object
    Dim fila As Long

    Set dictUnicos = CreateObject("Scripting.Dictionary")

    rutaArchivos = ThisWorkbook.Sheets("Macro").Range("B1").Value
    Set wsDestino = Workbooks(pPlan).Sheets("Load Factor")
    wsDestino.Cells.ClearContents
    fila = 2

    wsDestino.Range("A1:O1").Value = Array("PartNo", "CONTROL", "DIE", "Dep", "Group Code", "Eng Lev", _
                                           "Std Cav", "Act Cav", "Cycle Time", "Piece Weight", "Shot Weight", _
                                           "Pcs/Hour", "Capacidad", "Ensamble", "")

    fullPath = rutaArchivos & LOADFACTOR_FILENAME
    ProcesarArchivoLoadFactor fullPath, wsDestino, fila, dictUnicos
    ActualizarLoadFactorDesdeMDMQ0400_Fast pPlan, True

    RestoreExcelState state
    Exit Sub

ErrorHandler:
    RestoreExcelState state
    MsgBox "Error en TraeInformacionLoadFactor: " & Err.Description, vbCritical
End Sub

Private Sub ProcesarArchivoLoadFactor(fullPath As String, wsDestino As Worksheet, _
                                      ByRef fila As Long, dictUnicos As Object)
    Dim lineas() As String, campos() As String
    Dim dataArray() As Variant
    Dim i As Long, arrayRow As Long
    Dim claveUnica As String, partNo As String, campoDie As String
    Dim basePH As Double, cap As Double, eff As Double, ct As Double, actCav As Double

    lineas = LeerArchivoCompleto(fullPath)
    ReDim dataArray(1 To UBound(lineas), 1 To 14)
    arrayRow = 0

    For i = 1 To UBound(lineas)
        If Trim$(lineas(i)) <> "" And InStr(lineas(i), "|") > 0 Then
            campos = Split(lineas(i), "|")
            If UBound(campos) >= 20 Then
                If EXCLUIR_TROQUEL And TieneTroquel(campos(2)) Then GoTo Siguiente

                partNo = QuitarCerosIzquierda(campos(0))
                campoDie = Trim$(campos(2))

                claveUnica = partNo & IIf(Len(campoDie) > 5, Left$(campoDie, 5), campoDie)

                If Not dictUnicos.exists(claveUnica) Then
                    dictUnicos.Add claveUnica, vbNullString

                    ' Calcular capacidad
                    If IsNumeric(campos(11)) Then
                        basePH = Num(campos(11))
                    Else
                        ct = Num(campos(9))
                        actCav = Num(campos(8))
                        If actCav <= 0 Then actCav = 1
                        basePH = IIf(ct > 0, (3600# / ct) * actCav, 0)
                    End If
                    eff = EficienciaDeTexto(campos(20))
                    cap = basePH * eff

                    arrayRow = arrayRow + 1
                    dataArray(arrayRow, 1) = partNo
                    dataArray(arrayRow, 2) = campos(3)
                    dataArray(arrayRow, 3) = campoDie
                    dataArray(arrayRow, 4) = campos(4)
                    dataArray(arrayRow, 5) = campos(5)
                    dataArray(arrayRow, 6) = campos(6)
                    dataArray(arrayRow, 7) = campos(7)
                    dataArray(arrayRow, 8) = campos(8)
                    dataArray(arrayRow, 9) = campos(9)
                    dataArray(arrayRow, 10) = campos(10)
                    dataArray(arrayRow, 11) = ""
                    dataArray(arrayRow, 12) = basePH
                    dataArray(arrayRow, 13) = cap
                    dataArray(arrayRow, 14) = ""
                End If
            End If
        End If
Siguiente:
    Next i

    If arrayRow > 0 Then
        wsDestino.Range("A2").Resize(arrayRow, 14).Value = dataArray
        wsDestino.Rows(1).Font.Bold = True
        wsDestino.Columns("A:O").AutoFit
    End If

    fila = arrayRow + 2
End Sub

' =====================================================================
' ITEM MASTER - OPTIMIZADO
' =====================================================================
Sub traeInformacionItemMaster(pPlan As String)
    Dim state As ExcelState
    state = SaveExcelState()
    OptimizeExcelPerformance

    On Error GoTo ErrorHandler

    Dim rutaArchivo As String, fullPath As String
    Dim lineas() As String, campos() As String, dataArray() As Variant
    Dim wsDestino As Worksheet
    Dim i As Long, arrayRow As Long
    Dim valorModC As String, valorModD As String

    rutaArchivo = ThisWorkbook.Sheets("Macro").Range("B1").Value
    fullPath = rutaArchivo & "ENSAMBLE_ITEMMASTER.TXT"

    lineas = LeerArchivoCompleto(fullPath)
    Set wsDestino = Workbooks(pPlan).Sheets("Item Master")

    ReDim dataArray(1 To UBound(lineas), 1 To 10)
    arrayRow = 0

    For i = 1 To UBound(lineas)
        If Trim$(lineas(i)) <> "" Then
            campos = Split(lineas(i), "|")
            If UBound(campos) >= 8 Then
                Select Case UCase$(Left$(Trim$(campos(2)), 1))
                    Case "E": valorModC = "3"
                    Case "F": valorModC = "2"
                    Case Else: valorModC = "DEFAULT"
                End Select

                Select Case UCase$(Left$(Trim$(campos(3)), 2))
                    Case "Z1": valorModD = "3"
                    Case "Z2": valorModD = "2"
                    Case Else: valorModD = "DEFAULT"
                End Select

                arrayRow = arrayRow + 1
                dataArray(arrayRow, 1) = QuitarCerosIzquierda(CStr(campos(0)))
                dataArray(arrayRow, 2) = campos(1)
                dataArray(arrayRow, 3) = campos(2)
                dataArray(arrayRow, 4) = campos(5)
                dataArray(arrayRow, 5) = campos(3)
                dataArray(arrayRow, 6) = valorModC
                dataArray(arrayRow, 7) = valorModD
                dataArray(arrayRow, 8) = campos(6)
                dataArray(arrayRow, 9) = ""
                dataArray(arrayRow, 10) = campos(7)
            End If
        End If
    Next i

    If arrayRow > 0 Then
        wsDestino.Range("A2").Resize(arrayRow, 10).Value = dataArray
    End If

    RestoreExcelState state
    Exit Sub

ErrorHandler:
    RestoreExcelState state
    MsgBox "Error en traeInformacionItemMaster: " & Err.Description, vbCritical
End Sub

' =====================================================================
' INVENTARIO FG - OPTIMIZADO
' =====================================================================
Sub traeInformacionInventarioFG(pPlan As String)
    Dim state As ExcelState
    state = SaveExcelState()
    OptimizeExcelPerformance

    On Error GoTo ErrorHandler

    Dim rutaArchivos As String, vArchivo As String, fullPath As String
    Dim lineas() As String, campos() As String, dataArray() As Variant
    Dim dictSumatoria As Object
    Dim wsDestino As Worksheet
    Dim i As Long, arrayRow As Long
    Dim partNumber As String, fechaInj As String, invLoc As String, clave As Variant
    Dim boxUnit As Double, clavePartes() As String

    rutaArchivos = ThisWorkbook.Sheets("Macro").Range("B1").Value
    vArchivo = buscaArchivo("InvLocWIPFG")
    fullPath = rutaArchivos & vArchivo

    lineas = LeerArchivoCompleto(fullPath)
    Set dictSumatoria = CreateObject("Scripting.Dictionary")

    ' Agrupar datos
    For i = 1 To UBound(lineas)
        If Trim$(lineas(i)) <> "" Then
            campos = Split(lineas(i), "|")
            If UBound(campos) >= 5 Then
                If UCase$(Left$(Trim$(campos(1)), 4)) <> "HOLD" Then
                    partNumber = QuitarCerosIzquierda(campos(3))
                    fechaInj = Trim$(campos(4))
                    boxUnit = Val(campos(2))
                    invLoc = Trim$(campos(1))

                    If partNumber <> "" And fechaInj <> "" And invLoc <> "" Then
                        clave = partNumber & "|" & fechaInj & "|" & invLoc
                        If dictSumatoria.exists(clave) Then
                            dictSumatoria(clave) = dictSumatoria(clave) + boxUnit
                        Else
                            dictSumatoria.Add clave, boxUnit
                        End If
                    End If
                End If
            End If
        End If
    Next i

    ' Escribir resultados
    Set wsDestino = Workbooks(pPlan).Sheets("Inventario FG")
    wsDestino.Cells.ClearContents
    wsDestino.Range("A1:H1").Value = Array("SEQN2", "PARTNO", "DIE NO.", "BOX UNIT", _
                                           "INV LOCATION", "", "", "INJ. DATE")

    ReDim dataArray(1 To dictSumatoria.Count, 1 To 8)
    arrayRow = 0

    For Each clave In dictSumatoria.Keys
        clavePartes = Split(clave, "|")
        arrayRow = arrayRow + 1
        dataArray(arrayRow, 2) = clavePartes(0)
        dataArray(arrayRow, 4) = dictSumatoria(clave)
        dataArray(arrayRow, 5) = clavePartes(2)
        dataArray(arrayRow, 8) = clavePartes(1)
    Next

    If arrayRow > 0 Then
        wsDestino.Range("A2").Resize(arrayRow, 8).Value = dataArray
    End If

    RestoreExcelState state
    Exit Sub

ErrorHandler:
    RestoreExcelState state
    MsgBox "Error en traeInformacionInventarioFG: " & Err.Description, vbCritical
End Sub

' =====================================================================
' WIP - OPTIMIZADO
' =====================================================================
Sub traeInformacionInvLocWIP(pPlan As String)
    Dim state As ExcelState
    state = SaveExcelState()
    OptimizeExcelPerformance

    On Error GoTo ErrorHandler

    Dim rutaArchivos As String, fullPath As String, fullPath2 As String
    Dim lineas() As String, campos() As String, dataArray() As Variant
    Dim wsDestino As Worksheet
    Dim i As Long, arrayRow As Long

    rutaArchivos = ThisWorkbook.Sheets("Macro").Range("B1").Value
    fullPath = rutaArchivos & buscaArchivo("InvLocWIP")
    fullPath2 = rutaArchivos & buscaArchivo("InvCompon")

    Set wsDestino = Workbooks(pPlan).Sheets("WIP")
    wsDestino.Cells.ClearContents

    ' Estimar tamaño
    lineas = LeerArchivoCompleto(fullPath)
    ReDim dataArray(1 To UBound(lineas) * 2, 1 To 6)
    arrayRow = 0

    ' Procesar InvLocWIP
    For i = 1 To UBound(lineas)
        If Trim$(lineas(i)) <> "" Then
            campos = Split(lineas(i), "|")
            If UBound(campos) >= 5 Then
                arrayRow = arrayRow + 1
                dataArray(arrayRow, 1) = campos(1)
                dataArray(arrayRow, 2) = IIf(IsNumeric(campos(2)), Val(campos(2)), 0)
                dataArray(arrayRow, 3) = QuitarCerosIzquierda(campos(3))
                dataArray(arrayRow, 4) = campos(4)
                dataArray(arrayRow, 5) = campos(5)
                dataArray(arrayRow, 6) = "InvLocWIP"
            End If
        End If
    Next i

    ' Procesar InvCompon
    lineas = LeerArchivoCompleto(fullPath2)
    For i = 1 To UBound(lineas)
        If Trim$(lineas(i)) <> "" And InStr(lineas(i), "|") > 0 Then
            campos = Split(lineas(i), "|")
            If UBound(campos) >= 6 Then
                arrayRow = arrayRow + 1
                If arrayRow > UBound(dataArray, 1) Then
                    ReDim Preserve dataArray(1 To arrayRow + 1000, 1 To 6)
                End If
                dataArray(arrayRow, 1) = campos(3)
                dataArray(arrayRow, 2) = IIf(IsNumeric(campos(4)), Val(campos(4)), 0)
                dataArray(arrayRow, 3) = QuitarCerosIzquierda(campos(0))
                dataArray(arrayRow, 4) = campos(6)
                dataArray(arrayRow, 5) = campos(5)
                dataArray(arrayRow, 6) = "InvCompon"
            End If
        End If
    Next i

    If arrayRow > 0 Then
        wsDestino.Range("A2").Resize(arrayRow, 6).Value = dataArray
    End If

    RestoreExcelState state
    Exit Sub

ErrorHandler:
    RestoreExcelState state
    MsgBox "Error en traeInformacionInvLocWIP: " & Err.Description, vbCritical
End Sub

' =====================================================================
' CAPACIDADES - OPTIMIZADO
' =====================================================================
Sub traeInformacionCapacidades(pPlan As String)
    Dim state As ExcelState
    state = SaveExcelState()
    OptimizeExcelPerformance

    On Error GoTo ErrorHandler

    Dim wbOrigen As Workbook, wsOrigen As Worksheet, wsDestino As Worksheet
    Dim rutaBase As String, archivoLF As String, archivoItemMaster As String
    Dim lineas() As String, campos() As String
    Dim dictCapEnsamble As Object, dictCapMoldeo As Object
    Dim dictUnicos As Object, dictExcluirPartNosZ2 As Object, dictExcluirChildsZ2F As Object
    Dim dataArray() As Variant
    Dim i As Long, fila As Long, arrayRow As Long
    Dim partNo As String, child As String

    ' Crear diccionarios
    Set dictCapEnsamble = CreateObject("Scripting.Dictionary")
    Set dictCapMoldeo = CreateObject("Scripting.Dictionary")
    Set dictUnicos = CreateObject("Scripting.Dictionary")
    Set dictExcluirPartNosZ2 = CreateObject("Scripting.Dictionary")
    Set dictExcluirChildsZ2F = CreateObject("Scripting.Dictionary")

    rutaBase = ThisWorkbook.Sheets("Macro").Range("B1").Value
    archivoLF = rutaBase & LOADFACTOR_FILENAME
    archivoItemMaster = rutaBase & "ENSAMBLE_ITEMMASTER.TXT"

    ' Leer ItemMaster y exclusiones
    lineas = LeerArchivoCompleto(archivoItemMaster)
    For i = 1 To UBound(lineas)
        If Trim$(lineas(i)) <> "" Then
            campos = Split(lineas(i), "|")
            If UBound(campos) >= 4 Then
                partNo = QuitarCerosIzquierda(campos(0))
                If UCase$(Trim$(campos(3))) = "Z2" Then
                    dictExcluirPartNosZ2(partNo) = True
                End If
                If UCase$(Trim$(campos(2))) = "F" And UCase$(Trim$(campos(3))) = "Z2" Then
                    dictExcluirChildsZ2F(partNo) = True
                End If
            End If
        End If
    Next i

    ' Calcular capacidades desde LoadFactor
    CalcularCapacidadesDesdeLoadFactor archivoLF, dictCapEnsamble, dictCapMoldeo, dictUnicos

    ' Procesar BOM
    Set wbOrigen = Workbooks.Open("\\Yazaki.local\na\elcom\chihuahua\Area_General\Materiales\Archivos Macro PCD\EP1\Extractor\BOM_SIN_EMPAQUE_FICR4700_1815.xlsx", ReadOnly:=True)
    Set wsOrigen = wbOrigen.Sheets(1)
    Set wsDestino = Workbooks(pPlan).Sheets("Capacidades")
    wsDestino.Cells.ClearContents
    wsDestino.Range("A1:D1").Value = Array("#Parte", "Child", "Capacidad de Moldeo", "Capacidad de Ensamble")

    Dim lastRow As Long
    lastRow = wsOrigen.Cells(wsOrigen.Rows.Count, "B").End(xlUp).Row
    ReDim dataArray(1 To lastRow, 1 To 4)
    arrayRow = 0

    For fila = 2 To lastRow
        If wsOrigen.Cells(fila, "I").Value = 1 Then
            partNo = QuitarCerosIzquierda(wsOrigen.Cells(fila, "B").Value)
            child = QuitarCerosIzquierda(wsOrigen.Cells(fila, "C").Value)

            If Not dictExcluirPartNosZ2.exists(partNo) And Not dictExcluirChildsZ2F.exists(child) Then
                If Left$(child, 3) <> "M51" And Left$(child, 1) <> "Y" Then
                    arrayRow = arrayRow + 1
                    dataArray(arrayRow, 1) = partNo
                    dataArray(arrayRow, 2) = child
                    dataArray(arrayRow, 3) = IIf(dictCapMoldeo.exists(child), dictCapMoldeo(child), "No encontrado: --")
                    dataArray(arrayRow, 4) = IIf(dictCapEnsamble.exists(partNo), dictCapEnsamble(partNo), "No encontrado: --")
                End If
            End If
        End If
    Next fila

    If arrayRow > 0 Then
        wsDestino.Range("A2").Resize(arrayRow, 4).Value = dataArray
    End If

    wbOrigen.Close SaveChanges:=False

    RestoreExcelState state
    Exit Sub

ErrorHandler:
    On Error Resume Next
    wbOrigen.Close SaveChanges:=False
    On Error GoTo 0
    RestoreExcelState state
    MsgBox "Error en traeInformacionCapacidades: " & Err.Description, vbCritical
End Sub

Private Sub CalcularCapacidadesDesdeLoadFactor(fullPath As String, dictCapEnsamble As Object, _
                                               dictCapMoldeo As Object, dictUnicos As Object)
    Dim lineas() As String, campos() As String
    Dim i As Long, np As String, die As String, claveUnica As String
    Dim basePH As Double, capRow As Double, eff As Double, ct As Double, actCav As Double

    lineas = LeerArchivoCompleto(fullPath)

    For i = 1 To UBound(lineas)
        If Trim$(lineas(i)) <> "" Then
            campos = Split(lineas(i), "|")
            If UBound(campos) >= 20 Then
                np = QuitarCerosIzquierda(Trim$(campos(0)))
                die = QuitarCerosIzquierda(Trim$(campos(2)))
                claveUnica = np & "|" & die

                If Not dictUnicos.exists(claveUnica) Then
                    dictUnicos.Add claveUnica, ""

                    If IsNumeric(campos(11)) Then
                        basePH = Num(campos(11))
                    Else
                        ct = Num(campos(9))
                        actCav = Num(campos(8))
                        If actCav <= 0 Then actCav = 1
                        basePH = IIf(ct > 0, (3600# / ct) * actCav, 0)
                    End If
                    eff = EficienciaDeTexto(campos(20))
                    capRow = basePH * eff

                    dictCapEnsamble(np) = dictCapEnsamble(np) + capRow
                    dictCapMoldeo(np) = dictCapMoldeo(np) + capRow
                End If
            End If
        End If
    Next i
End Sub

' =====================================================================
' ACTUALIZAR LOAD FACTOR DESDE MDMQ0400 - OPTIMIZADO
' =====================================================================
Public Sub ActualizarLoadFactorDesdeMDMQ0400_Fast(ByVal pPlan As String, Optional ByVal soloASVacio As Boolean = True)
    Dim state As ExcelState
    state = SaveExcelState()
    OptimizeExcelPerformance

    On Error GoTo ErrorHandler

    Dim ruta As String, fullPath As String
    Dim wbM As Workbook, wsM As Worksheet, wsLF As Worksheet
    Dim rFinM As Long, rFinLF As Long
    Dim arrA As Variant, arrE As Variant, arrF As Variant, arrAS As Variant
    Dim arrLFA As Variant, arrLFN As Variant, arrLFC As Variant
    Dim dict As Object
    Dim i As Long, k As String
    Dim mat As String, wc As String, st As String, a As String, n As String

    ruta = ThisWorkbook.Sheets("Macro").Range("B1").Value
    fullPath = "\\Yazaki.local\na\elcom\chihuahua\Area_General\Materiales\Archivos Macro PCD\EP1\Extractor\MDMQ0400.XLS"
    If Dir(fullPath) = "" Then fullPath = ruta & "MDMQ0400.xlsx"
    If Dir(fullPath) = "" Then
        Err.Raise vbObjectError + 100, , "No se encontró MDMQ0400.xlsx"
    End If

    Set wbM = Workbooks.Open(fullPath, ReadOnly:=True)
    Set wsM = wbM.Worksheets(1)
    Set wsLF = Workbooks(pPlan).Worksheets("Load Factor")

    rFinM = UltimaFila(wsM)
    If rFinM < 2 Then GoTo Cleanup

    ' Leer datos MDMQ0400 en arrays
    arrA = wsM.Range(wsM.Cells(2, COL_MATERIAL), wsM.Cells(rFinM, COL_MATERIAL)).Value2
    arrE = wsM.Range(wsM.Cells(2, COL_SHORTTXT), wsM.Cells(rFinM, COL_SHORTTXT)).Value2
    arrF = wsM.Range(wsM.Cells(2, COL_WORKCTR), wsM.Cells(rFinM, COL_WORKCTR)).Value2
    arrAS = wsM.Range(wsM.Cells(2, COL_AS), wsM.Cells(rFinM, COL_AS)).Value2

    Set dict = CreateObject("Scripting.Dictionary")
    dict.CompareMode = 1

    For i = 1 To UBound(arrA, 1)
        If (Not soloASVacio) Or EsVacioRobusto(arrAS(i, 1)) Then
            mat = QuitarCerosIzquierda(CStr(arrA(i, 1)))
            wc = Trim$(CStr(arrF(i, 1)))
            If LenB(mat) > 0 And LenB(wc) > 0 Then
                st = Left$(Trim$(CStr(arrE(i, 1))), 5)
                k = mat & "|" & wc
                dict(k) = st
            End If
        End If
    Next i

    ' Leer Load Factor
    rFinLF = UltimaFila(wsLF)
    If rFinLF < 1 Then GoTo Cleanup

    arrLFA = wsLF.Range("A1:A" & rFinLF).Value2
    arrLFN = wsLF.Range("N1:N" & rFinLF).Value2
    arrLFC = wsLF.Range("C1:C" & rFinLF).Value2

    For i = 1 To UBound(arrLFA, 1)
        a = Trim$(CStr(arrLFA(i, 1)))
        n = Trim$(CStr(arrLFN(i, 1)))
        If LenB(a) > 0 And LenB(n) > 0 Then
            k = QuitarCerosIzquierda(a) & "|" & n
            If dict.exists(k) Then
                If arrLFC(i, 1) <> dict(k) Then
                    arrLFC(i, 1) = dict(k)
                End If
            End If
        End If
    Next i

    wsLF.Range("C1:C" & rFinLF).Value2 = arrLFC

Cleanup:
    On Error Resume Next
    If Not wbM Is Nothing Then wbM.Close SaveChanges:=False
    On Error GoTo 0
    RestoreExcelState state
    Exit Sub

ErrorHandler:
    On Error Resume Next
    If Not wbM Is Nothing Then wbM.Close SaveChanges:=False
    On Error GoTo 0
    RestoreExcelState state
    MsgBox "Error en ActualizarLoadFactorDesdeMDMQ0400_Fast: " & Err.Description, vbCritical
End Sub

' =====================================================================
' OTRAS FUNCIONES AUXILIARES OPTIMIZADAS
' =====================================================================
Public Sub CargarArchivoFlexPlanDesdeRuta(rutaBase As String)
    Dim state As ExcelState
    state = SaveExcelState()
    OptimizeExcelPerformance

    On Error GoTo ErrorHandler

    Dim archivoCompleto As String, seleccionManual As Variant
    Dim wbOrigen As Workbook, hojaOrigen As Worksheet, hojaDestino As Worksheet

    archivoCompleto = rutaBase & "YCC Flex Planning.xlsx"

    On Error Resume Next
    Set wbOrigen = Workbooks.Open(archivoCompleto, ReadOnly:=True)
    On Error GoTo ErrorHandler

    If wbOrigen Is Nothing Then
        seleccionManual = Application.GetOpenFilename("Archivos Excel (*.xlsx), *.xlsx", , "Selecciona el archivo de Flex Plan")
        If seleccionManual = "False" Then
            MsgBox "No se seleccionó ningún archivo.", vbExclamation
            GoTo Cleanup
        End If

        Set wbOrigen = Workbooks.Open(seleccionManual, ReadOnly:=True)
        If wbOrigen Is Nothing Then
            MsgBox "No se pudo abrir el archivo seleccionado.", vbCritical
            GoTo Cleanup
        End If
    End If

    On Error Resume Next
    Set hojaOrigen = wbOrigen.Sheets("Flex-plan")
    On Error GoTo ErrorHandler

    If hojaOrigen Is Nothing Then
        MsgBox "No se encontró la hoja 'Flex-plan' en el archivo seleccionado.", vbExclamation
        GoTo Cleanup
    End If

    Set hojaDestino = ThisWorkbook.Sheets("FlexPlan")
    hojaDestino.Cells.ClearContents
    hojaOrigen.UsedRange.Copy Destination:=hojaDestino.Range("A1")
    ThisWorkbook.Sheets("Macro").Range("B1").Value = wbOrigen.FullName
    MsgBox "Datos cargados correctamente desde 'Flex-plan'.", vbInformation

Cleanup:
    On Error Resume Next
    If Not wbOrigen Is Nothing Then wbOrigen.Close SaveChanges:=False
    On Error GoTo 0
    RestoreExcelState state
    Exit Sub

ErrorHandler:
    GoTo Cleanup
End Sub
